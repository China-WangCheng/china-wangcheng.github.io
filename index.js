// 全局 Three.js 场景变量
let scene, camera, renderer, particles, particleMaterial;
// 鼠标位置用于控制相机移动
let mouseX = 0, mouseY = 0;
let windowHalfX = window.innerWidth / 2;
let windowHalfY = window.innerHeight / 2;

// 页面完全加载后执行初始化函数
window.onload = function () {
    // 为 body 添加 'loaded' 类，触发页面渐入动画
    document.body.classList.add('loaded');

    initThreeJS(); // 初始化 Three.js 场景
    animateThreeJS(); // 启动 Three.js 动画循环
    populateHomeStrengths(); // 填充首页核心优势数据
    populateWorkExperience(); // 填充工作经历数据
    populateProjects(); // 填充项目经历数据
    populateCertifications(); // 填充技能证书数据
    setupScrollAnimations(); // 设置滚动动画效果
    setupActiveNavLinkHighlight(); // 设置导航链接高亮效果
};

/**
 * @function initThreeJS
 * @description 初始化 Three.js 场景、相机、渲染器和粒子系统。
 */
function initThreeJS() {
    scene = new THREE.Scene(); // 创建新场景
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); // 创建透视相机
    // 创建 WebGL 渲染器，并指定画布元素，设置背景透明
    renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('threejs-background'), alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight); // 设置渲染器尺寸
    renderer.setPixelRatio(window.devicePixelRatio); // 提高高 DPI 屏幕的清晰度

    // 创建粒子
    const particleCount = 2000; // 粒子数量
    const positions = new Float32Array(particleCount * 3); // 存储粒子位置的数组 (x, y, z)
    const colors = new Float32Array(particleCount * 3); // 存储粒子颜色的数组 (r, g, b)

    const color1 = new THREE.Color(0x64ffda); // 第一个强调色
    const color2 = new THREE.Color(0x00d4ff); // 第二个强调色

    for (let i = 0; i < particleCount; i++) {
        // 随机设置粒子在空间中的位置 (-200 到 200 之间)
        positions[i * 3] = (Math.random() * 2 - 1) * 200; // x 坐标
        positions[i * 3 + 1] = (Math.random() * 2 - 1) * 200; // y 坐标
        positions[i * 3 + 2] = (Math.random() * 2 - 1) * 200; // z 坐标

        // 在两种颜色之间进行插值，给粒子赋予随机颜色
        const color = new THREE.Color().lerpColors(color1, color2, Math.random());
        colors[i * 3] = color.r;
        colors[i * 3 + 1] = color.g;
        colors[i * 3 + 2] = color.b;
    }

    const geometry = new THREE.BufferGeometry(); // 创建几何体
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3)); // 设置位置属性
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3)); // 设置颜色属性

    particleMaterial = new THREE.PointsMaterial({
        size: 0.5, // 粒子大小
        vertexColors: true, // 使用顶点颜色
        transparent: true, // 启用透明度
        blending: THREE.AdditiveBlending, // 叠加混合模式，使粒子发光
        sizeAttenuation: true // 粒子大小随距离衰减
    });

    particles = new THREE.Points(geometry, particleMaterial); // 创建粒子网格
    scene.add(particles); // 将粒子添加到场景

    camera.position.z = 50; // 设置相机初始位置

    // 添加事件监听器，响应鼠标移动、触摸移动和窗口大小调整
    document.addEventListener('mousemove', onDocumentMouseMove);
    document.addEventListener('touchmove', onDocumentTouchMove, { passive: false });
    window.addEventListener('resize', onWindowResize);
}

/**
 * @function onDocumentMouseMove
 * @description 处理鼠标移动事件，更新鼠标位置以影响相机。
 * @param {MouseEvent} event - 鼠标事件对象。
 */
function onDocumentMouseMove(event) {
    mouseX = (event.clientX - windowHalfX) * 0.1;
    mouseY = (event.clientY - windowHalfY) * 0.1;
}

/**
 * @function onDocumentTouchMove
 * @description 处理触摸移动事件，更新触摸位置以影响相机。
 * @param {TouchEvent} event - 触摸事件对象。
 */
function onDocumentTouchMove(event) {
    if (event.touches.length === 1) {
        mouseX = (event.touches[0].pageX - windowHalfX) * 0.1;
        mouseY = (event.touches[0].pageY - windowHalfY) * 0.1;
    }
}

/**
 * @function onWindowResize
 * @description 处理窗口大小调整事件，更新相机纵横比和渲染器尺寸。
 */
function onWindowResize() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    camera.aspect = window.innerWidth / window.innerHeight; // 更新相机纵横比
    camera.updateProjectionMatrix(); // 更新相机投影矩阵
    renderer.setSize(window.innerWidth, window.innerHeight); // 更新渲染器尺寸
}

/**
 * @function animateThreeJS
 * @description Three.js 动画循环函数。
 */
function animateThreeJS() {
    requestAnimationFrame(animateThreeJS); // 循环调用自身，实现动画

    // 粒子系统的微妙旋转
    particles.rotation.x += 0.00005;
    particles.rotation.y += 0.0001;

    // 让粒子缓慢漂移，增加动态感
    if (particles && particles.geometry && particles.geometry.attributes.position) {
        const positions = particles.geometry.attributes.position.array;
        const time = Date.now() * 0.00001;
        for (let i = 0; i < positions.length; i += 3) {
            positions[i] += Math.sin(time + i) * 0.001;
            positions[i + 1] += Math.cos(time + i) * 0.001;
            positions[i + 2] += Math.sin(time + i * 2) * 0.001;

            // 当粒子移动到太远时，将其位置反转并稍微衰减，使其保持在视口内循环
            if (Math.abs(positions[i]) > 200) positions[i] *= -0.9;
            if (Math.abs(positions[i + 1]) > 200) positions[i + 1] *= -0.9;
            if (Math.abs(positions[i + 2]) > 200) positions[i + 2] *= -0.9;
        }
        particles.geometry.attributes.position.needsUpdate = true; // 告知 Three.js 更新几何体位置
    }

    // 相机根据鼠标位置进行微妙移动
    camera.position.x += (mouseX - camera.position.x) * 0.005;
    camera.position.y += (-mouseY - camera.position.y) * 0.005;
    camera.lookAt(scene.position); // 相机始终看向场景中心

    renderer.render(scene, camera); // 渲染场景
}

// --- 章节数据定义 ---
// 核心优势
const coreAdvantages = [
    {
        title: '技术能力',
        description: '技术能力覆盖全栈及AI领域，后端精通Java生态与Golang开发，前端掌握Vue等技术，熟悉数据库优化、分布式缓存等核心技能，有AI项目经验。',
        icon: '<svg class="w-9 h-9 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M333.346133 512l81.237334 108.305067a31.8464 31.8464 0 0 1-50.961067 38.229333l-95.573333-127.419733a31.8464 31.8464 0 0 1 0-38.229334l95.573333-127.419733a31.8464 31.8464 0 1 1 50.961067 38.229333L333.346133 512z m380.689067 108.305067a31.8464 31.8464 0 0 0 50.9952 38.229333l95.573333-127.419733a31.8464 31.8464 0 0 0 0-38.229334l-95.573333-127.419733a31.8464 31.8464 0 0 0-50.9952 38.229333L795.306667 512l-81.237334 108.305067z m-150.493867 26.043733a31.8464 31.8464 0 0 1-62.190933-13.824l63.726933-286.72a31.8464 31.8464 0 0 1 62.190934 13.824l-63.726934 286.72z m313.9584 92.501333a31.880533 31.880533 0 1 1 41.7792 48.128l-219.477333 195.106134a31.8464 31.8464 0 0 1-20.8896 7.7824H201.0112C146.363733 989.866667 102.4 944.674133 102.4 889.378133V134.587733C102.4 79.291733 146.363733 34.133333 201.0112 34.133333h631.022933c54.647467 0 98.645333 45.1584 98.645334 100.4544v134.417067a31.8464 31.8464 0 1 1-63.726934 0V134.621867c0-20.514133-15.837867-36.7616-34.9184-36.7616H201.045333c-19.080533 0-34.884267 16.247467-34.884266 36.727466v754.7904c0 20.514133 15.803733 36.7616 34.884266 36.7616h466.0224l210.500267-187.255466h-0.034133z m53.179734 23.210667a31.8464 31.8464 0 1 1-63.726934 0v-90.794667a31.8464 31.8464 0 0 1 63.726934 0v90.8288z" fill="#71ffdb" p-id="39438"></path></svg>',
    },
    {
        title: '项目经验',
        description: '涉及 AI 智能语音助手、电商平台等多种类型项目，在项目中解决了实时对话、高并发处理等关键问题，具备较强的技术应用与问题解决能力。',
        icon: '<svg class="w-9 h-9 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M922.24 0c50.8672 0 95.4112 44.544 95.4112 95.4112v826.8288c0 50.8672-44.544 95.4112-95.4112 95.4112H95.4112C44.5184 1017.6512 0 973.1072 0 922.24V95.4112C0 44.5184 44.544 0 95.4112 0h826.8288zM95.4112 63.5904c-19.0976 0-31.8208 12.7232-31.8208 31.8208v158.976h890.4448v-158.976c0-19.0976-12.7232-31.8208-31.7952-31.8208H95.4112z m826.8288 890.4448c19.072 0 31.7952-12.7232 31.7952-31.7952V318.0032H63.5904v604.2368c0 19.072 12.7232 31.7952 31.8208 31.7952h826.8288zM190.7968 540.6208a31.7952 31.7952 0 1 1 63.616 0 31.7952 31.7952 0 0 1-63.616 0z m604.2368 31.7952H349.824a31.8976 31.8976 0 0 1-31.8208-31.7952c0-17.4848 14.336-31.7952 31.8208-31.7952h445.184c17.5104 0 31.8208 14.3104 31.8208 31.7952 0 17.4848-14.3104 31.7952-31.7952 31.7952zM190.7968 731.4176a31.7952 31.7952 0 1 1 63.616 0 31.7952 31.7952 0 0 1-63.616 0z m604.2368 31.8208H349.824a31.8976 31.8976 0 0 1-31.8208-31.8208c0-17.4848 14.336-31.7952 31.8208-31.7952h445.184c17.5104 0 31.8208 14.336 31.8208 31.7952 0 17.5104-14.3104 31.8208-31.7952 31.8208z" fill="#71ffdb" p-id="30985"></path></svg>',
    },
    {
        title: '实习经历',
        description: '有多段实习经历，涵盖后端开发、前端重构等工作，曾担任实习小组组长，负责核心模块开发，工作成果获得认可，实战经验丰富。',
        icon: '<svg class="w-9 h-9 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M933.144238 166.132349H656.55088v71.793358l276.467404-0.629766c15.870111 0 30.480689 12.847232 30.480689 29.473063v654.705043c0 7.683149-3.022878 14.862485-8.312915 20.530381-5.667897 5.667897-12.847232 9.824354-20.530381 9.824354l-830.031981 1.007626c-15.870111 0-29.473063-12.847232-29.473062-28.843296v-654.95695c0-7.683149 2.645018-14.862485 7.683148-20.530381 5.667897-5.667897 12.343419-10.83198 20.530382-10.83198h277.097171l0.629766-71.163592h-277.097171c-55.671341 0-101.140467 46.3508-100.510701 102.525953v654.705043c0 27.457811 11.839606 52.648462 30.984502 71.793358 19.144895 19.144895 44.335547 28.465437 71.793358 28.465437H935.663303c27.457811 0 52.648462-11.335793 71.793358-30.480689s27.457811-44.965314 27.45781-71.793358l0.629767-655.208856c-0.251907-56.0492-46.224846-100.384748-102.4-100.384748z m0 0" fill="#71ffdb" p-id="29655"></path><path d="M824.320621 475.851415H606.043623c-8.312915 0-16.499877 3.652645-22.167774 9.824354-5.667897 6.297663-9.320541 13.854859-9.320541 22.167773 0 8.312915 3.022878 15.870111 9.320541 22.167774 5.667897 5.667897 13.476999 8.690775 22.167774 8.690775h218.276998c17.507503 0 31.488315-13.854859 31.488315-31.488315-0.125953-17.507503-13.980812-31.362362-31.488315-31.362361zM605.665763 737.582288c-16.877737 0-31.488315 13.854859-31.488315 31.488315 0 8.312915 3.022878 16.499877 9.320541 22.167773 5.667897 5.667897 13.854859 9.320541 22.167774 9.320542h87.663468c8.312915 0 16.499877-3.022878 22.167774-9.320542 5.667897-6.297663 9.320541-13.854859 9.320541-22.167773 0.629766-16.877737-13.476999-31.488315-31.488315-31.488315H605.665763zM846.488395 660.37294c5.667897-6.297663 9.320541-13.854859 9.320541-22.167774 0-8.312915-3.022878-16.499877-9.320541-22.167774-5.667897-5.667897-13.854859-9.320541-22.167774-9.320541l-218.276998 0.503813c-16.877737 0-31.488315 13.854859-31.488315 31.488315 0 17.507503 13.854859 31.488315 31.488315 31.488315h218.276998c8.186962-0.125953 16.499877-3.778598 22.167774-9.824354zM648.489871 261.856827h-16.877737V113.861747c0-62.472817-51.01107-113.861747-114.113653-113.861747-30.228782 0-58.694219 11.839606-80.861993 33.503567-21.789914 21.538007-32.999754 50.003444-32.999754 80.987946l0.629767 147.869127h-16.877737c-14.484625 0.629766-26.450185 12.343419-26.450184 26.828044 0 7.305289 2.645018 13.854859 7.683148 18.515129 5.290037 5.290037 11.839606 7.683149 18.515129 7.683149l261.98278-0.629766c14.484625 0 26.828044-11.839606 26.828045-26.828045-0.629766-14.484625-12.343419-26.072325-27.457811-26.072324z m-191.574908 0l-0.629766-147.869127c0.251907-15.366298 6.297663-30.858549 17.75941-42.698155 11.335793-11.335793 26.828044-17.507503 42.698155-17.507503 15.870111 0 30.984502 6.297663 42.698155 17.507503 11.335793 11.335793 18.137269 26.828044 18.137269 42.698155v104.541205c0.629766 0 1.007626 43.327921 1.007626 43.327922h-121.670849z" fill="#71ffdb" p-id="29656"></path><path d="M517.750388 140.689791c14.484625 0 26.828044-11.839606 26.828044-26.828044-0.629766-7.305289-3.652645-13.476999-8.312915-18.51513-5.290037-5.290037-11.839606-8.312915-19.144896-7.683148-14.484625 0-26.450185 11.839606-26.450184 26.828044 0.125953 14.862485 12.217466 26.198278 27.079951 26.198278z m0 0" fill="#71ffdb" p-id="29657"></path><path d="M380.335381 579.510947c33.755474-22.167774 56.0492-61.339237 58.31636-102.903813 0.125953-0.881673 0.125953-1.763346 0.125953-2.770972 0-1.007626 0-1.889299-0.125953-2.770971-3.526691-68.01476-55.923247-119.40369-124.315868-121.670849-69.274293-2.267159-122.300615 58.442312-124.44182 124.44182-1.385486 44.461501 23.049446 82.247478 58.190406 104.163346C156.642393 610.621402 100.593192 712.391636 121.249527 811.390898c1.385486 6.801476 8.438868 11.461747 15.114391 11.461747h355.817958c6.675523 0 13.728905-4.786224 15.114391-11.461747 21.412054-102.02214-35.518819-198.62829-126.960886-231.879951zM221.256415 473.836162c-1.637392-52.018696 43.579828-91.442066 93.079458-93.079458 52.018696-1.637392 91.442066 43.579828 93.079459 93.079458-1.637392 52.018696-41.060763 91.442066-93.079459 93.079459-52.018696 1.763346-91.56802-43.579828-93.079458-93.079459z m93.079458 124.819681c103.533579-2.015252 178.349815 94.842804 164.872817 192.83444H149.463057c-14.232718-100.258795 61.717097-190.819188 164.872816-192.83444z m0 0" fill="#71ffdb" p-id="29658"></path></svg>',
    },
    {
        title: '综合素质',
        description: '持有软件设计师证书，通过 CET4，在机器人大赛、创新创业大赛等赛事中斩获全国及省级奖项，具备良好的创新、实践、团队协作与快速学习能力。',
        icon: '<svg class="w-9 h-9 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.24-.963L3 20l1.395-3.692A9.962 9.962 0 0112 4c4.97 0 9 3.582 9 8z"></path></svg>' // 聊天气泡图标
    }
];

// 实习经历
const InternshipExperience = [
    {
        time: '2025年7月 - 2025年8月',
        company: '优课达（杭州）网络有限公司',
        title: '后端开发实习生',
        description: [
            "作为实习小组组长，参与Golang+Vue的 AI 语音交互助手平台全栈开发，统筹15人团队的项目推进与管理，同时深度参与后端开发。",
            "团队管理上，负责 15 人任务分配与 Git 仓库管理，按技术背景划分前端、大模型交互、socket 连接等模块，明确职责与接口。组织完善项目及接口文档，形成标准化规范。通过每日站会同步进度、每周 demo 展示联调代码，实时掌握项目进度，保障开发有序推进。",
            "后端开发中，深度参与大模型交互层与 WebSocket 通信机制实现。独立完成 LLM 流式响应处理模块，保障实时对话低延迟；开发模型工具调用模块，支持第三方服务灵活集成。牵头设计 WebSocket 通信框架核心逻辑，优化连接池与消息路由，为实时交互奠定基础。并以实例讲解、难点拆解等方式指导团队，提升整体效能。",
            "实习期间，凭借统筹协调、问题解决及技术开发能力，带领团队顺利完成智能对话平台的核心功能开发与测试验收，项目上线后获得项目经理的高度认可，个人也获评 “团队纪律官”、“皇阿码”称号。",
        ]
    },
    {
        time: '2024年7月 - 2024年8月',
        company: '安徽兴励信息科技有限公司',
        title: '前端开发实习生',
        description: [
            "在公司前端页面项目重构任务中负责导航栏模块化重构，基于Vue与vue-router实现多级菜单（一至三级）组件化开发，拆分独立功能组件，构建清晰的层级架构，同步设计路由守卫机制，通过全局前置守卫与组件内守卫结合，实现不同角色的菜单权限管控。",
            "设计路由匹配逻辑，结合路由守卫的权限判断结果，通过路径前缀/后缀匹配规则实现菜单的动态选中状态与权限过滤，解决旧有导航定位混乱与权限泄露问题。开发核心交互功能，包括菜单折叠/展开动画、高亮显示、路由跳转等，通过路由守卫优化跳转前的权限校验流程，确保未授权用户无法访问受限页面。",
            "完成导航栏模块化重构，结合vue-router路由守卫实现权限管控，非法访问拦截率 100%，系统安全性显著提升。组件化架构使代码复用率提升 40%。输出含路由守卫策略的技术文档，纳入团队组件库，权限相关线上问题减少 80%。"
        ]
    },
    {
        time: '2024年5月 - 2024年5月',
        company: '上海沪享家装饰公司',
        title: '网站运维实习生',
        description: [
            "负责公司官网的云服务器部署工作，基于Linux系统完成服务器基础环境搭建，包括安装Nginx服务、配置PHP运行环境及MySQL数据库，确保各组件版本兼容并正常运行。",
            "负责云平台安全组规则配置，根据业务需求开放必要端口（如 80、443），同时关闭冗余端口，限制非授权IP访问，提升服务器网络安全防护能力。",
            "学习并实践SSL证书安装流程，为网站配置 HTTPS 加密访问，完成域名解析与服务器绑定，确保网站正常访问并通过浏览器安全验证。",
        ],
    }
];
//项目经历
const projects = [
    {
        name: "AI智能语音助手",
        time: "2025.07 - 2025.08",//项目起止时间
        icon: '<svg class="w-12 h-12 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M492.441354 5.274109a39.01438 39.01438 0 0 1 39.01438 0l204.799898 118.527941 204.697498 118.527941c11.724794 6.655997 18.943991 19.14879 18.99519 32.614384v474.111762a37.785581 37.785581 0 0 1-18.99519 32.665584l-204.748698 118.527941-204.748698 118.527941a39.06558 39.06558 0 0 1-39.01438 0l-409.497395-237.055882a37.734381 37.734381 0 0 1-18.943991-32.665584V274.944375c0-13.465593 7.270396-25.907187 18.943991-32.614384l204.697497-118.527941 204.799898-118.527941zM511.948544 81.920471L326.809437 189.133217l-185.804708 107.519947v430.642984l185.804708 107.519947L511.948544 942.080041l185.139107-107.110346 185.753508-107.622347V296.653164l-185.753508-107.468747L511.999744 81.920471V81.920471z" p-id="10183" fill="#71ffdb"></path><path d="M511.999744 0.000512c21.196789 0 38.502381 16.947192 38.502381 37.939181V512.000256c-0.0512 13.619193-7.423996 26.111987-19.302391 32.819184a39.01438 39.01438 0 0 1-38.50238 0A37.785581 37.785581 0 0 1 473.446163 512.000256V37.888493c0-10.086395 3.993598-19.71199 11.263995-26.879987A38.860781 38.860781 0 0 1 511.948544 0.000512z" p-id="10184" fill="#71ffdb"></path><path d="M478.719761 492.800266a38.911981 38.911981 0 0 1 52.735973-13.414394l409.497396 236.953482a37.580781 37.580781 0 0 1 12.748793 51.353574 38.860781 38.860781 0 0 1-51.865574 14.079993L492.543754 544.66584a37.580781 37.580781 0 0 1-13.823993-51.865574h0.0512z" p-id="10185" fill="#71ffdb"></path><path d="M492.441354 479.385872a38.860781 38.860781 0 0 1 51.814374 13.926393 37.580781 37.580781 0 0 1-12.799994 51.404775l-409.446195 236.953481a38.860781 38.860781 0 0 1-51.865574-13.977593 37.580781 37.580781 0 0 1 12.799994-51.353574l409.497395-236.953482z m19.50719 231.679884c21.247989 0 38.553581 16.895992 38.553581 37.887982v237.055881c0 20.99199-17.305591 37.887981-38.553581 37.887981a38.195181 38.195181 0 0 1-38.502381-37.887981v-237.055881c0-20.99199 17.254391-37.887981 38.502381-37.887982z m388.966206-468.326165a38.911981 38.911981 0 0 1 53.145573 12.031994 37.580781 37.580781 0 0 1-12.236794 52.326373l-192.665504 118.527941a39.06558 39.06558 0 0 1-38.55358 1.28 37.734381 37.734381 0 0 1-2.303999-65.689568l192.614304-118.47674z m-831.129185 12.134394A39.01438 39.01438 0 0 1 122.879939 242.841991l192.716703 118.42554A37.734381 37.734381 0 0 1 313.343843 427.008298a39.01438 39.01438 0 0 1-38.50238-1.331199L82.073559 307.149158a37.427181 37.427181 0 0 1-12.185594-52.275173h-0.1536z" p-id="10186" fill="#71ffdb"></path></svg>',
        description: "作为核心后端开发人员，设计并实现基于Golang和Vue的AI智能语音助手系统，集成阿里云LLM大模型、RAGFlow知识库与腾讯云ASR/TTS服务，构建包含智能知识库检索、动态工具调用平台（支持5种第三方服务）、实时低延迟通信（WebSocket延迟<200ms）和高性能后端服务（支持100+并发用户，响应时间<300ms）的全栈解决方案，成功交付支持文本/语音多模态交互的智能助手系统，系统稳定性达95%。",
        technologies: ['Golang', 'RagFlow', 'WebSocket', 'RustPbx', 'Webrtc', 'Gin', 'MySQL'],
        fullContent: {//项目具体内容
            background: '该项目旨在构建一个集成AI能力的智能对话平台，解决传统客服系统交互效率低、知识更新慢的问题。采用Golang后Vue技术，打造具备自然语言理解、多模态交互和第三方服务集成能力的智能助手系统，支持企业级知识库管理和实时对话功能，满足多样化场景下的智能交互需求。本人作为后端核心开发人员，负责系统架构设计、LLM交互层实现、实时通信机制搭建及第三方服务集成。',
            goal: '开发支持自定义人设的智能助手，实现个性化对话体验；构建多模态交互系统，支持文本与语音的双向转换；设计可扩展的第三方工具调用框架，扩展系统功能边界；实现低延迟实时对话机制，保障流畅的用户体验；开发知识库管理功能，支持精准信息检索与多源知识整合。',
            design: [
                '全栈技术架构：后端采用Golang/Gin框架构建高性能服务，搭配MySQL数据库实现数据持久化，通过WebSocket实现实时双向通信；集成阿里云LLM(qwen-turbo)大模型、RAGFlow知识库系统、腾讯云ASR/TTS服务，构建完整AI能力栈；前端使用Vue3/Vite构建响应式界面，实现文本/语音多模态交互、知识库管理等功能。',
                'LLM交互层设计与实现：独立设计符合OpenAI API规范的大模型交互层，对接阿里云qwen-turbo模型，实现流式响应处理机制；开发工具调用系统，支持动态注册工具（当前时间查询、天气查询、网络搜索等），实现参数校验与结果解析；设计对话上下文管理策略，实现多轮对话连贯性与历史记录持久化（MySQL/SQLite存储）。',
                '实时通信系统开发：独立设计WebSocket通信框架，实现客户端与服务器双向实时数据传输，消息延迟控制在200ms以内；开发音频流传输模块，使用rustpbxgo库实现语音活动检测(VAD)、实时降噪和语音转文字(ASR)、文本转语音(TTS)，实现WebRTC协议支持的实时音频流传输，实现VAD触发TTS中断机制，提升对话流畅度；设计消息队列机制，优化并发处理能力。',
                '后端架构与API开发：基于Gin框架构建RESTful API，实现用户认证、助手管理、知识库操作等核心功能接口；设计分层架构，分离业务逻辑与数据访问层，提高代码可维护性；实现全局错误处理与日志系统（logrus），完善系统监控与问题排查机制。',
                '第三方服务集成：集成腾讯云ASR/TTS服务，实现语音到文本、文本到语音的转换功能；对接高德地图API实现天气查询功能，博采AI API实现网络搜索能力；设计统一的第三方服务封装层，降低耦合度，提高可扩展性。',
                '知识库检索系统开发：设计并实现基于RAGFlow的知识库检索系统，支持多种数据格式导入（如PDF、Excel、Word、Markdown等），并提供实时搜索功能；实现检索结果与LLM的智能融合，提升回答相关性与准确性。',
            ],
            achievement: '成功交付稳定运行的全栈智能助手系统，支持文本/语音多模态交互；设计实现可扩展的工具调用平台，已集成5种第三方服务，支持动态扩展；构建完善的后端监控与日志系统，系统问题排查时间缩短70%；开发自定义人设功能，支持用户个性化助手配置，提升用户体验；实现多知识库管理系统，支持数据导入、知识库管理、知识问答等功能；完善的异常处理机制，系统稳定性高达95%。',
        }
    },
    {
        name: "鲜花商城",
        time: "2025.02 - 2025.04",
        icon: '<svg class="w-12 h-12 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M742.4 332.8 275.2 332.8C262.4 332.8 249.6 320 249.6 300.8s12.8-25.6 25.6-25.6l467.2 0c12.8 0 25.6 12.8 25.6 25.6S761.6 332.8 742.4 332.8zM787.2 889.6 236.8 889.6c-32 0-64-19.2-64-57.6L172.8 620.8c0-19.2 12.8-32 25.6-32 19.2 0 32 12.8 32 32L230.4 832l556.8 0L787.2 620.8c0-19.2 12.8-32 32-32 19.2 0 32 12.8 32 32L851.2 832C851.2 864 825.6 889.6 787.2 889.6zM864 492.8c-12.8 6.4-32 12.8-51.2 12.8-38.4 0-102.4-25.6-121.6-57.6l0 0 0 0c0 0 0-6.4-6.4-6.4-6.4-6.4-12.8-12.8-19.2-12.8-6.4 0-19.2 6.4-19.2 12.8l0 0C633.6 441.6 633.6 448 633.6 448l0 0 0 0C614.4 480 550.4 505.6 512 505.6 473.6 505.6 409.6 480 390.4 448l0 0 0 0c0 0-6.4-6.4-6.4-6.4l0 0C377.6 428.8 371.2 428.8 364.8 428.8c-6.4 0-19.2 6.4-19.2 6.4l0 0C339.2 441.6 332.8 448 332.8 448l0 0 0 0C313.6 480 256 499.2 217.6 499.2c-19.2 0-38.4-6.4-51.2-6.4l0 0 0 0C134.4 473.6 121.6 448 121.6 409.6c0-12.8 0-19.2 6.4-32 0 0 0 0 0 0l0 0 76.8-166.4C211.2 198.4 211.2 192 230.4 192l556.8 0 0 0c6.4 0 19.2 0 25.6 19.2L896 377.6l0 0c0 0 0 0 0 0 6.4 12.8 6.4 19.2 6.4 32C902.4 454.4 896 473.6 864 492.8zM953.6 371.2 953.6 371.2 953.6 371.2C953.6 371.2 953.6 371.2 953.6 371.2L953.6 371.2C953.6 371.2 953.6 371.2 953.6 371.2l-83.2-185.6 0 0c-12.8-25.6-38.4-51.2-76.8-51.2L230.4 134.4c-38.4 0-64 19.2-76.8 51.2l0 0L70.4 371.2c0 0 0 0 0 0l0 0 0 0C64 384 64 403.2 64 416 64 467.2 96 512 140.8 537.6l6.4 0c19.2 6.4 44.8 12.8 64 12.8 44.8 0 115.2-25.6 140.8-57.6l6.4-6.4 6.4 6.4C422.4 537.6 467.2 550.4 512 550.4c44.8 0 96-12.8 140.8-57.6l6.4-6.4 6.4 6.4c25.6 32 102.4 57.6 147.2 57.6 25.6 0 51.2-6.4 70.4-12.8C928 512 960 467.2 960 416 960 403.2 960 384 953.6 371.2z" p-id="16175" fill="#71ffdb"></path></svg>',
        description: "参与基于Spring Boot+Vue的在线鲜花商城系统开发，作为后端开发核心人员负责Controller层、Dao层开发及第三方服务集成，构建15+核心API，借MyBatis-Plus减少80%重复开发；设计Redis缓存结合布隆过滤器防穿透，响应时间从500ms降至150ms，热门商品命中率 63%；集成支付宝/微信双支付、阿里云OSS（图片加载提速 60%）及短信服务，支撑支付、存储与消息通知场景，助力系统稳定上线。",
        technologies: ["Java", "Maven", "Redis", "SpringBoot", "Spring MVC", "MyBatis-Plus", "MySQL"],
        fullContent: {
            background: "该项目旨在构建一个集成多模块功能的在线鲜花商城系统，解决传统电商平台商品管理复杂、订单流程繁琐的问题。采用Spring Boot+Vue技术栈，打造具备商品管理、订单处理、第三方服务集成能力的全栈电商平台，支持多角色权限管理和实时数据交互功能，满足鲜花零售场景下的业务需求。本人作为后端开发人员，负责Controller层、Dao层开发及第三方服务集成工作。",
            goal: " 开发高性能商品管理系统，实现多维度查询与库存预警；构建稳定的订单处理流程，支持状态实时更新；设计灵活的第三方服务集成框架，对接支付、存储和消息通知服务；实现基于角色的权限控制机制，保障系统数据安全；优化数据库查询性能，提升页面响应速度。",
            design: [
                "整体技术架构：后端采用SpringBoot/SpringMVC框架构建RESTful API，搭配MyBatis-Plus实现数据访问层，使用MySQL进行数据持久化，Redis缓存热门商品数据；集成支付宝/微信支付SDK、阿里云OSS对象存储服务；前端使用Vue2+Element UI构建用户界面，通过Axios实现前后端数据交互；采用Nginx作为反向代理服务器，实现负载均衡与静态资源缓存。",
                "API架构设计与开发：基于SpringMVC框架，负责设计并实现了商品管理、订单处理、用户认证等核心模块的RESTful API接口，涵盖15+核心业务场景，确保接口规范性与可扩展性。实现基于JSR-303的请求参数校验机制，结合全局异常处理器，将接口异常响应时间缩短至200ms以内，提升系统健壮性。使用Apifox进行API文档的全生命周期管理，定义接口规范、请求/响应参数及错误码体系，支持版本控制与团队协作，使前后端并行开发效率提升40%。通过Apifox的Mock服务功能，为前端提供稳定的测试数据，减少因后端接口未完成导致的开发阻塞。",
                "数据访问层优化：基于MyBatis-Plus框架设计数据访问层，实现CRUD操作的代码复用，减少80%重复开发工作；自定义SQL注入器扩展批量操作功能，提升数据批量处理效率。设计分表存储方案处理历史订单数据，结合动态数据源路由，解决单表数据量过大导致的查询性能瓶颈。实现基于Spring声明式事务的订单支付流程事务管理，保障订单状态与库存数据的一致性。",
                "缓存与性能优化：使用Redis缓存热门商品信息与分类数据，将系统平均响应时间从500ms优化至150ms。实现缓存预热与定时更新机制，结合布隆过滤器解决缓存穿透问题，保障高并发场景下的系统稳定性。",
                "第三方服务集成：集成支付宝/微信支付SDK，设计统一支付接口适配多支付渠道，实现支付结果异步通知处理与订单状态自动更新。对接阿里云OSS对象存储服务，实现商品图片的上传、压缩与水印处理，将图片加载速度提升60%。集成阿里云短信服务SDK，设计并实现了基于模板的短信发送系统，支持用户注册验证码、订单状态变更通知、物流信息提醒等场景。",
            ],
            achievement: "成功开发并上线基于SpringBoot+Vue的在线鲜花商城系统，实现商品展示、购物车、订单支付等核心功能，支持微信/支付宝双渠道支付，系统上线后稳定运行。设计的Redis缓存架构有效减轻数据库压力，热门商品查询命中率提升至63%，减少数据库查询量。使用Apifox管理API文档，规范了15+核心业务接口的定义与变更流程，接口文档维护成本降低50%，前后端联调时间缩短30%。实现的订单状态流转事务管理机制，保障了交易数据的一致性与准确性。",
        }
    },
    {
        name: '电商平台',
        time: '2024.09 - 2024.12',
        icon: '<svg class="w-12 h-12 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M768 618.667H576a64 64 0 0 0-64 64v106.666a64 64 0 0 0 64 64h192a64 64 0 0 0 64-64V682.667a64 64 0 0 0-64-64z m21.333 170.666A21.333 21.333 0 0 1 768 810.667H576a21.333 21.333 0 0 1-21.333-21.334V682.667A21.333 21.333 0 0 1 576 661.333h192a21.333 21.333 0 0 1 21.333 21.334z" fill="#71ffdb" p-id="12907"></path><path d="M932.053 149.333h-57.386v-42.666a64 64 0 0 0-64-64H213.333a64 64 0 0 0-64 64v42.666H91.947L0 390.827v3.84A117.547 117.547 0 0 0 85.333 507.52V896a64 64 0 0 0 64 64h725.334a64 64 0 0 0 64-64V507.52A117.547 117.547 0 0 0 1024 394.667v-3.84zM192 106.667a21.333 21.333 0 0 1 21.333-21.334h597.334A21.333 21.333 0 0 1 832 106.667v42.666H192z m42.667 810.666V682.667A21.333 21.333 0 0 1 256 661.333h128a21.333 21.333 0 0 1 21.333 21.334v234.666z m640 0H448V682.667a64 64 0 0 0-64-64H256a64 64 0 0 0-64 64v234.666h-42.667A21.333 21.333 0 0 1 128 896V512a117.333 117.333 0 0 0 85.333-49.28 117.333 117.333 0 0 0 192-1.28 134.613 134.613 0 0 0 211.414 0 117.333 117.333 0 0 0 192 1.28A117.333 117.333 0 0 0 896 512v384a21.333 21.333 0 0 1-21.333 21.333z m32-448A74.667 74.667 0 0 1 832 394.667h-42.667a74.667 74.667 0 0 1-149.333 0h-42.667A80.64 80.64 0 0 1 512 469.333a80.64 80.64 0 0 1-85.333-74.666H384a74.667 74.667 0 0 1-149.333 0H192a74.667 74.667 0 0 1-149.333 3.626L121.387 192h781.226l78.72 206.293a74.667 74.667 0 0 1-74.666 71.04z" fill="#71ffdb" p-id="12908"></path></svg>',
        description: '电商平台基于Java技术栈，解决传统电商高并发下库存、分布式事务及异步通信问题。采用Spring Boot构建微服务，集成MyBatis、Redis、Kafka等组件，实现商品、订单、支付等核心业务。订单系统用Redisson生成唯一单号，通过商品ID维度RLock保障库存一致；支付模块集成支付宝API，借Kafka实现支付结果异步通知；并用Redis缓存热点商品，解决分布式场景下的关键问题。',
        technologies: ["Java", "Maven", "Redis", "Kafka", "Spring Boot", "Spring Web", "MyBatis", "MySQL", "PageHelper "],
        fullContent: {//项目具体内容
            url: "https://gitee.com/China-WangCheng/dewu",
            background: '该项目旨在构建一个仿得物平台的电商后端系统，作为Java后端技术栈的实践项目，解决传统电商系统在高并发场景下的库存管理、分布式事务和异步通信等核心问题。采用Spring Boot框架，集成MyBatis、MySQL、Redis、Redisson、Kafka等组件，实现商品管理、订单处理、支付集成、实时数据统计等电商业务流程，打造高可用、高性能的分布式电商后端系统。',
            goal: '开发支持高并发场景的商品库存管理系统，解决分布式环境下的库存超卖问题；构建完整的订单生命周期管理流程，实现订单创建、支付、取消等状态的可靠流转；集成支付宝第三方支付接口，实现安全稳定的支付流程；设计基于Kafka的异步通信机制，支持支付结果通知和实时交易数据统计；开发用户认证与授权模块，保障系统安全访问；实现商品详情页缓存策略，提升系统响应性能。',
            design: [
                "技术架构设计：采用Spring Boot 3.4.6构建微服务架构，基于分层设计模式实现Controller-Service-Dao三层架构；使用MySQL存储核心业务数据，MyBatis实现ORM映射，PageHelper优化分页查询；Redis结合Redisson实现分布式锁和原子计数器，解决高并发下的库存竞争和分布式ID生成问题；Kafka作为异步通信中枢，配置生产者批处理（batch-size=16384）和消费者自动提交机制（auto-commit-interval=100ms），支撑支付结果通知和实时交易统计两大核心场景。",
                "核心业务模块实现：订单系统采用Redisson的RAtomicLong生成唯一订单号（格式：yyyyMMdd+6位自增序号），结合RLock分布式锁控制库存更新，防止超卖；支付模块集成支付宝SDK，实现支付表单生成、回调处理和幂等校验，通过状态机模式管理支付流水状态变迁（PENDING→SUCCESS→FAILURE）；商品模块使用PageHelper实现分页查询，结合Redis缓存热点商品数据，提升访问性能；用户模块采用MD5加盐哈希存储密码，实现注册、登录和权限控制功能。",
                "高并发与分布式解决方案：基于Redisson实现分布式协调，使用RAtomicLong生成全局唯一ID，RLock控制并发资源访问，RMap缓存业务数据；Kafka主题设计分离支付通知（pay_topic）和统计数据（stat_topic），通过生产者重试机制和消费者手动提交offset保证消息可靠性；支付宝回调接口实现IP白名单校验和签名验证，敏感数据传输采用HTTPS加密，核心接口添加请求频率限制。",
            ],
            achievement: '通过独立完成电商平台后端系统项目，熟练运用Spring Boot、MyBatis-Plus等构建后端服务，深入理解MySQL数据库设计优化、Redis缓存策略及Kafka消息队列的异步处理模式，形成完整的技术栈知识体系。独立开发商品管理、订单处理、支付流程等核心模块，完成从商品浏览、购物车操作、下单支付到订单查询的全流程业务逻辑，建立清晰的模块间交互关系。成功设计并实现Redis分布式锁机制解决并发库存控制问题，有效防止超卖现象；基于Kafka构建异步消息处理系统，实现订单状态变更通知、支付结果回调等解耦场景，提升系统并发处理能力。通过Maven进行依赖管理，建立完整的开发流程与版本控制规范。完成包括架构设计说明书、接口文档、数据库设计手册在内的全套技术文档，形成规范化的开发实践记录。通过本次项目，深化了我对分布式系统设计思想的理解，培养了我独立分析和解决复杂问题的能力，特别是在高并发场景下的数据一致性保障、第三方服务集成等方面积累了宝贵经验，为后续大型系统开发奠定了坚实基础。',
        }

    },
    {
        name: "G60-人工智能应用平台",
        time: "2024.07 - 2024.08",
        icon: '<svg class="w-12 h-12 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M911.904 64H112.096a80 80 0 0 0-80 80V704a80 80 0 0 0 80 80h359.936V864h-160v80h400V864h-160v-80h359.872a80 80 0 0 0 80-80V144a80 80 0 0 0-80-80z m0 640h-800s-0.16-560 0-560h800s0.256 560 0 560z" fill="#71ffdb" p-id="24343"></path><path d="M460.256 502.4H184.128c-15.072 0-27.68 18.56-27.68 41.44V544c0 22.88 12.448 41.344 27.68 41.28h276.128c15.264 0 27.616-18.56 27.616-41.44s-12.384-41.44-27.616-41.44z" fill="#71ffdb" p-id="24344"></path><path d="M446.432 263.264H197.984a41.6 41.6 0 0 0-41.6 41.44v0.16a41.408 41.408 0 0 0 41.6 41.28h248.448a41.6 41.6 0 0 0 41.44-41.44 41.6 41.6 0 0 0-41.44-41.44z" fill="#71ffdb" p-id="24345"></path><path d="M620.416 281.504l-96.768 291.84h46.784l24.992-83.2h101.504l24.576 83.2h48.8l-96.8-291.84z m65.408 172.48h-79.712l11.904-39.232c9.6-31.712 18.624-63.84 26.944-97.152h1.6c9.12 32.928 17.856 65.44 27.744 97.152z" fill="#71ffdb" p-id="24346"></path><path d="M797.952 281.408h45.984v291.84h-45.984z" fill="#71ffdb" p-id="24347"></path></svg>', description: "",
        description: "在公司前端重构中，负责导航栏升级，基于Vue开发多级动态菜单，借路由守卫构建权限体系解决旧系统权限泄露问题，技术上采用Vue3单文件组件、递归渲染多级菜单、Composition API封装逻辑，通过双重路由守卫结合路径匹配实现权限管控与高亮，并用SCSS优化交互动画与响应式体验，最终实现非法访问拦截率100%、代码复用率升40%、用户操作效率提高25%。",
        technologies: ["Vue", "Vue Router", "SCSS", "JavaScript", "Element UI"],
        fullContent: {
            background: "原G60-人工智能应用平台采用传统jQuery+原生JavaScript+后端模板渲染架构，存在代码耦合度高、UI组件复用率低、首屏加载慢及安全漏洞问题。项目启动整体架构重构，我作为重构团队核心成员，负责导航栏模块的独立重构工作，通过组件化改造、前后端权限分离及动态菜单配置，解决旧系统架构缺陷，为用户提供更安全高效的体验。",
            goal: "开发支持一至三级菜单的动态渲染组件，实现层级导航展示；构建基于路由守卫的权限管控体系，实现不同角色的菜单访问控制；设计路径匹配与高亮逻辑，解决旧系统导航定位混乱问题；开发菜单折叠/展开、路由跳转等核心交互功能，提升用户体验；实现组件化架构设计，提高代码复用率与可维护性。",
            design: [
                '组件化架构设计：采用Vue 3单文件组件模式，拆分独立功能模块，开发多级菜单组件，通过递归渲染实现二至三级菜单动态展示，构建清晰的组件层级结构。',
                '路由守卫权限系统：设计双重校验机制，结合全局前置守卫(beforeEach)与组件内守卫实现权限控制；开发路径匹配函数，通过路径前缀/后缀匹配规则实现菜单高亮与权限过滤，确保未授权用户无法访问受限页面。',
                '交互体验优化：使用SCSS实现菜单折叠/展开动画效果，通过动态类名切换实现路由高亮状态；设计响应式布局，适配不同屏幕尺寸，优化移动端体验；实现平滑路由过渡效果，提升页面切换流畅度。',
                '模块化与可扩展性：采用Vue Composition API拆分复用逻辑，提取菜单渲染、权限校验等通用功能为组合式函数；设计可配置的菜单数据源接口，支持后端动态传入菜单数据；通过Prop类型校验与默认值设置，增强组件健壮性。'
            ],
            achievement: "成功完成导航栏模块化重构，构建基于Vue Router的权限管控体系，非法访问拦截率达100%，系统安全性显著提升；组件化架构使代码复用率提升40%，维护成本降低35%；优化导航定位逻辑，解决旧系统菜单高亮混乱问题，用户操作效率提升25%；开发5+可复用组件，纳入团队组件库，后续项目开发效率提升30%；输出包含路由守卫策略的技术文档，权限相关线上问题减少80%。",
        }
    },
    {
        name: '2048小游戏',
        time: '2023.08 - 2023.08',
        icon: '<svg class="w-12 h-12 mb-4 text-[#64ffda]" fill="none" stroke="currentColor" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M791.167682 304.114219V189.501241c0-12.28474-0.644645-19.983988-1.897445-23.073418-1.2528-3.101593-4.208436-4.658471-8.818254-4.658471-4.549003 0-7.553291 1.654183-8.988538 4.938223-1.471736 3.296203-2.18936 10.898146-2.189359 22.793666v112.89798c0 13.440236 0.668971 21.540866 2.031239 24.289729 1.374431 2.773189 4.317904 4.14762 8.84258 4.14762s7.504638-1.617694 8.915559-4.840917c1.398758-3.235387 2.104218-10.533253 2.104218-21.881434zM964.175747 14.011902H595.888964c-25.34792 0-46.086021 20.859732-46.086021 46.329283v370.853199c0 25.530366 20.738101 46.390098 46.086021 46.390099h368.286783c25.34792-0.060816 46.025205-20.920548 46.025206-46.390099V60.341185c0-25.469551-20.677286-46.329283-46.025206-46.329283z m-118.480846 156.818967c1.751488 7.991163 2.639395 20.713775 2.639394 38.204326v76.968155c0 17.490551-0.973049 30.213163-2.870493 38.204326-1.897445 7.979-5.850456 15.447149-11.859032 22.380121-6.008576 6.945135-13.245626 11.919847-21.723313 14.960624-8.477687 3.040777-17.952749 4.561166-28.449512 4.561166-13.817292 0-25.299267-1.593367-34.458089-4.767939-9.158821-3.198898-16.432361-8.161446-21.86927-14.899809-5.43691-6.750526-9.292615-13.853781-11.57928-21.309767-2.274501-7.443823-3.417834-19.302854-3.417834-35.577095v-80.519782c0-21.188136 1.824466-37.060994 5.497726-47.60641 3.661096-10.545416 10.958961-19.01094 21.86927-25.372246 10.910309-6.373469 24.131609-9.560204 39.688225-9.560203 12.649634 0 23.997814 2.225849 33.995891 6.628894 9.998076 4.427372 17.478388 9.827792 22.440936 16.201262 4.962549 6.361306 8.33173 13.525377 10.095381 21.504377zM428.171851 14.011902H59.824253c-25.287104 0-46.025205 20.859732-46.025206 46.329283v370.853199c0 25.530366 20.738101 46.390098 46.025206 46.390099h368.347598c25.34792 0 46.025205-20.859732 46.025206-46.390099V60.341185c0-25.469551-20.677286-46.329283-46.025206-46.329283zM240.422098 324.755016H303.427004v38.921949H176.930668l0.304078-32.840395c37.097483-61.326397 59.1492-99.28746 66.142987-113.858865s10.4846-25.943912 10.484601-34.117521c0-6.264001-1.05819-10.946798-3.186735-14.024065s-5.388257-4.634145-9.730487-4.634145c-4.378719 0-7.601943 1.714998-9.730488 5.132832-2.128544 3.417834-3.198898 10.217012-3.198897 20.373208V211.6381H176.930668v-8.380382c0-12.880733 0.644645-23.036929 1.982587-30.480752 1.325779-7.43166 4.597655-14.753851 9.803466-21.954412s11.968499-12.661797 20.300229-16.347219c8.319567-3.685422 18.317642-5.546378 29.969901-5.546378 22.80583 0 40.053119 5.680172 51.766193 17.028353 11.688748 11.360344 17.539203 25.737139 17.539203 43.118222 0 13.209137-3.284039 27.184549-9.839955 41.914075-6.580242 14.729525-25.907423 45.988716-58.030194 93.765409zM215.828291 814.928316H242.611458v-98.19278L215.828291 814.928316z m212.34356-268.026274H59.824253c-25.287104 0-46.025205 20.920548-46.025206 46.329283v370.841036c0 25.481714 20.738101 46.341446 46.025206 46.341446h368.347598c25.34792 0 46.025205-20.859732 46.025206-46.341446V593.231325c0-25.408735-20.677286-46.329283-46.025206-46.329283zM223.357256 662.889451H299.778071v152.038865h15.812042v38.921949h-15.812042v40.138261H242.611458v-40.138261H172.065424v-38.921949l51.291832-152.038865zM791.167682 839.631591v-29.507703c0-8.818254-0.912233-14.693036-2.70021-17.600019-1.80014-2.89482-4.658471-4.354393-8.52634-4.354393-3.807053 0-6.519427 1.410921-8.173609 4.220599-1.678509 2.809678-2.493437 8.720949-2.493437 17.733813v29.933412c0 9.985913 0.912233 16.395871 2.773189 19.242038 1.848793 2.858331 4.755776 4.281414 8.745275 4.281415 4.062478 0 6.823504-1.44741 8.246588-4.354393 1.410921-2.882657 2.128544-9.42641 2.128544-19.594769z m-1.216311-109.565288v-16.030978c0-7.906021-0.681134-13.136158-2.055565-15.678247-1.362268-2.554253-3.965174-3.843543-7.808716-3.843543-3.758401 0-6.312654 1.386594-7.614107 4.123294-1.337942 2.761026-1.982587 7.881695-1.982586 15.398496v17.782466c0 7.030277 0.74195 11.895521 2.238012 14.595731 1.508226 2.70021 4.050315 4.050315 7.626269 4.050315 3.758401 0 6.288327-1.313616 7.62627-3.977336 1.301453-2.639395 1.970424-8.112794 1.970423-16.420198z m174.224376-183.164261H595.888964c-25.34792 0-46.086021 20.920548-46.086021 46.329283v370.841036c0 25.481714 20.738101 46.341446 46.086021 46.341446h368.286783c25.34792 0 46.025205-20.859732 46.025206-46.341446V593.231325c0-25.408735-20.677286-46.329283-46.025206-46.329283zM842.313556 747.933911c-3.211061 5.546378-9.791303 11.068429-19.728563 16.517502 8.246588 3.405671 14.607894 8.477687 19.059592 15.228213 4.451698 6.762689 6.68971 22.842319 6.68971 48.226728 0 18.512252-1.80014 32.134934-5.376094 40.916699-3.588117 8.781765-10.581905 15.982325-20.9692 21.613845-10.387295 5.607193-24.326218 8.416872-41.768117 8.416871-16.991864 0-30.444262-2.70021-40.369359-8.076304-9.912934-5.376094-17.004027-12.503676-21.297605-21.382746-4.293578-8.87907-6.446448-23.657247-6.446448-44.334533 0-13.878108 1.021701-25.907423 3.113756-36.112271 2.079892-10.180522 8.611481-18.354132 19.619096-24.496502-7.188398-3.44216-12.564492-8.927722-16.140446-16.456687-3.588117-7.528965-5.376094-17.089168-5.376095-28.680611 0-20.008315 5.534215-35.029754 16.614808-45.039994 11.080592-10.022402 27.646747-15.033603 49.710627-15.033603 25.481714 0 43.106059 5.315279 52.848709 15.958 9.730487 10.642721 14.620057 25.834444 14.620058 45.563007 0 12.564492-1.617694 21.626008-4.804429 27.172386z" p-id="2861" data-spm-anchor-id="a313x.search_index.0.i21.44933a81ptJ1t8" class="selected" fill="#71ffdb"></path></svg>',
        description: '基于 HTML、CSS 和 JavaScript 开发 4x4 网页版 2048，实践前端核心技能。实现方块移动合并等玩法，设计界面，管理分数与缓存，完成胜负判定。采用模块化设计，通过 SCSS 实现自适应布局与动画，优化移动逻辑，实现数据持久化与状态同步。最终实现完整流程，支持方向控制与状态保存，界面适配多设备，代码易维护。',
        technologies: ['HTML', 'CSS', 'JavaScript'],
        fullContent: {//项目具体内容
            url: "https://gitee.com/China-WangCheng/2048-game",
            background: '2048 作为经典数字合并益智游戏，本项目基于 HTML、CSS 和 JavaScript 原生技术栈，开发 4x4 规格网页版 2048，旨在实践前端核心技能，如 DOM 操作、事件处理、本地存储及游戏逻辑实现等。',
            goal: '实现完整 2048 核心玩法，包括方块移动、合并与随机生成；设计简洁美观界面；管理游戏状态，计算分数并记录历史最高分；通过 localStorage 实现数据本地缓存；保证交互流畅性，实现胜负判定与状态反馈。',
            design: [
                "整体架构设计：项目采用模块化设计思想，将核心功能拆解为六个独立模块：网格管理（grid.js）负责 4x4 网格的初始化与状态维护；方块控制（tile.js）定义方块属性与行为；界面渲染（render.js）处理 DOM 更新与视觉呈现；事件处理（listener.js）捕获键盘输入；数据存储（storage.js）管理本地缓存；游戏控制（manager.js）协调各模块运行，形成低耦合高内聚的代码结构。",
                "动态视觉体验：SCSS 变量计算网格尺寸与间距，实现自适应布局；方块按数值采用差异化配色（如tile-2至tile-2048渐变），通过appear（生成）和pop（合并）关键帧动画增强交互反馈。",
                "精准移动逻辑：manager.js中getPaths方法根据方向动态调整遍历顺序（如右移 / 下移反转行列），结合getNearestAvaibleAim规划路径，确保键盘操作响应流畅。",
                "数据持久化：storage.js通过BestScoreKey和CellStateKey分别存储最高分与游戏状态（分数、网格数据），页面刷新后可通过Grid.prototype.recover恢复进度。",
                "状态管理清晰：render.js实时同步分数、状态（进行中 / 胜利 / 失败），checkFailure方法检测空白格子和相邻方块数值，准确判定游戏结束。"
            ],
            achievement: '实现完整游戏流程，支持方向键控制，实时计算分数并更新最高分，提供胜负状态反馈，通过本地存储实现状态保存，添加方块移动、合并等动画提升体验。界面采用简洁设计，布局清晰，适配不同设备，代码按模块化组织，结构清晰。',
        }
    },

];
// 技能证书 
const certifications = [
    {
        imageUrl: './img/软件设计师.jpg',
        description: "软件设计师"
    },
];

/**
 * @function populateHomeStrengths
 * @description 填充首页的核心优势卡片数据。
 */
function populateHomeStrengths() {
    const strengthsGrid = document.getElementById('home-core-strengths-grid');
    // 使用 map 方法遍历数据，生成 HTML 字符串并插入到 DOM 中
    strengthsGrid.innerHTML = coreAdvantages.map(advantage => `
                <div class="bg-[#1e2730] p-6 rounded-xl shadow-lg flex flex-col items-center text-center cursor-pointer card-hover-effect opacity-0 scale-90" data-animation="scale-in">
                    ${advantage.icon}
                    <h3 class="text-xl font-bold text-[#64ffda] mb-2">${advantage.title}</h3>
                    <p class="text-[#c9d1d9] mb-4 text-sm flex-grow text-justify">${advantage.description}</p>
                </div>
            `).join('');
}

/**
 * @function populateWorkExperience
 * @description 填充工作经历时间线数据。
 */
function populateWorkExperience() {
    const timelineContainer = document.getElementById('work-timeline');
    // 根据时间倒序排列工作经历 (最新在前)
    const sortedExperiences = [...InternshipExperience].sort((a, b) => {
        const getTimeValue = (timeStr) => {
            // 从时间字符串中提取年份和月份进行比较 (例如 '2025年3月' -> 202503)
            const parts = timeStr.match(/(\d{4})年(\d{1,2})月/);
            if (parts) {
                return parseInt(parts[1] + (parts[2].length === 1 ? '0' + parts[2] : parts[2]));
            }
            return 0; // 不匹配格式的默认值
        };
        const timeA = getTimeValue(a.time.split(' - ')[0]); // 用于排序的开始时间
        const timeB = getTimeValue(b.time.split(' - ')[0]); // 用于排序的开始时间
        return timeB - timeA; // 降序排列 (最新在前)
    });

    // 使用 map 方法遍历数据，生成 HTML 字符串并插入到 DOM 中
    timelineContainer.innerHTML = sortedExperiences.map(exp => `
                <div class="timeline-item bg-[#1e2730] p-6 rounded-xl shadow-lg card-hover-effect opacity-0 translate-y-10" data-animation="fade-up">
                    <p class="text-sm text-[#8b949e] mb-3">${exp.time}</p>
                    <h3 class="text-xl font-bold text-[#64ffda] mb-1">${exp.company}</h3> <!-- 公司名称，强调显示 -->
                    <p class="text-lg text-[#c9d1d9] mb-3">${exp.title}</p> <!-- 职位名称，在公司名称下方 -->
                    <ul class="list-disc list-inside text-[#c9d1d9] space-y-1">
                        ${exp.description.map(item => `<li>${item}</li>`).join('')}
                    </ul>
                </div>
            `).join('');
}

/**
 * @function populateProjects
 * @description 填充项目经历卡片数据。
 */
function populateProjects() {
    const projectsGrid = document.getElementById('projects-grid');
    // 使用 map 方法遍历数据，生成 HTML 字符串并插入到 DOM 中
    projectsGrid.innerHTML = projects.map((project, index) => `
                <div class="bg-[#1e2730] p-6 rounded-xl shadow-lg flex flex-col items-center text-center cursor-pointer card-hover-effect opacity-0 scale-90" data-animation="scale-in" data-project-index="${index}">
                    ${project.icon}
                    <!-- 项目名称，带有底部细线，增加间距 -->
                    <h3 class="text-xl font-bold text-[#64ffda] border-b border-gray-700 pb-2 mb-4 w-full">${project.name}</h3>
                    <!-- 描述文本 -->
                    <p class="text-[#c9d1d9] mb-4 text-sm text-justify">${project.description}</p>
                    <!-- 技术栈 -->
                    <div class="flex flex-wrap justify-center gap-2 mt-auto">
                        ${project.technologies.map(tech => `<span class="bg-[#30363d] text-[#64ffda] text-xs px-3 py-1 rounded-full">${tech}</span>`).join('')}
                    </div>
                </div>
            `).join('');

    // 为每个项目卡片添加点击事件监听器，用于打开模态框
    document.querySelectorAll('#projects-grid > div').forEach(card => {
        card.addEventListener('click', function () {
            const index = this.dataset.projectIndex; // 获取项目索引
            openProjectModal(projects[index]); // 打开对应项目的模态框
        });
    });
}
/**
 * @function populateCertifications
 * @description 填充技能证书内容
 */
function populateCertifications() {
    const container = document.getElementById('certifications-container');
    if (!container) return;

    // 清空容器
    container.innerHTML = '';

    let html = '';
    certifications.forEach((cert, index) => {
        html += `
            <div class="certificate-item" data-index="${index}">
                <img src="${cert.imageUrl}" alt="${cert.description} 技能证书" class="certificate-image">
                <p class="certificate-description">${cert.description}</p>
            </div>
        `;
    });
    container.innerHTML = html;
}

// --- 项目详情模态框相关函数和变量 ---
const projectModal = document.getElementById('projectModal');
const closeButton = document.querySelector('.close-button');
const modalTitle = document.getElementById('modalTitle');
const modalTimeRole = document.getElementById('modalTimeRole');


/**
 * @function openProjectModal
 * @description 打开项目详情模态框。
 * @param {Object} project - 包含项目详细信息的对象。
 */
function openProjectModal(project) {
    document.body.style.overflow = 'hidden';//禁止背景滚动
    modalTitle.textContent = project.name;
    modalTimeRole.textContent = `${project.time}`;

    // 获取动态内容容器并清空
    const contentContainer = document.getElementById('dynamic-content-container');
    contentContainer.innerHTML = '';

    // 动态渲染项目背景
    if (project.fullContent.background && project.fullContent.background.trim() !== '') {
        contentContainer.innerHTML += `
            <div class="modal-section">
                <h4 class="modal-section-title">项目背景</h4>
                <p class="modal-text">${project.fullContent.background}</p>
            </div>
        `;
    }

    // 动态渲染项目目标
    if (project.fullContent.goal && project.fullContent.goal.trim() !== '') {
        contentContainer.innerHTML += `
            <div class="modal-section">
                <h4 class="modal-section-title">项目目标</h4>
                <p class="modal-text">${project.fullContent.goal}</p>
            </div>
        `;
    }

    // 动态渲染方案设计
    if (project.fullContent.design && (
        (Array.isArray(project.fullContent.design) && project.fullContent.design.length > 0) ||
        (typeof project.fullContent.design === 'string' && project.fullContent.design.trim() !== '')
    )) {
        let designContent;
        if (Array.isArray(project.fullContent.design)) {
            designContent = `
                <ul class="list-disc list-inside space-y-1">
                    ${project.fullContent.design.map(item => `<li>${item}</li>`).join('')}
                </ul>
            `;
        } else {
            designContent = project.fullContent.design;
        }

        contentContainer.innerHTML += `
            <div class="modal-section">
                <h4 class="modal-section-title">方案设计</h4>
                <div class="modal-text">${designContent}</div>
            </div>
        `;
    }

    // 动态渲染项目成果
    if (project.fullContent.achievement && project.fullContent.achievement.trim() !== '') {
        contentContainer.innerHTML += `
            <div class="modal-section">
                <h4 class="modal-section-title">项目成果</h4>
                <p class="modal-text">${project.fullContent.achievement}</p>
            </div>
        `;
    }
    // 动态渲染项目链接
    if (project.fullContent.url && project.fullContent.url.trim() !== '') {
        contentContainer.innerHTML += `
            <div class="modal-section">
                <h4 class="modal-section-title">项目仓库</h4>
                <a href="${project.fullContent.url}" target="_blank" class="text-[#c9d1d9] hover:underline">${project.fullContent.url}</a>
            </div>
        `;
    }


    projectModal.style.display = 'flex'; // 先将 display 设置为 flex
    projectModal.classList.add('show-modal'); // 然后添加类来触发动画
}

/**
 * @function closeProjectModal
 * @description 关闭项目详情模态框，带动画效果。
 */
function closeProjectModal() {
    projectModal.classList.remove('show-modal'); // 移除显示类
    projectModal.classList.add('hide-modal'); // 添加隐藏类来触发渐出动画

    // 监听动画结束事件，动画结束后才真正隐藏模态框
    projectModal.addEventListener('animationend', function handler(event) {
        // 确保只有当结束的是背景或内容渐出动画时才隐藏
        if (event.animationName === 'fadeOutModalBg' || event.animationName === 'fadeOutModalContent') {
            projectModal.style.display = 'none'; // 动画结束后隐藏
            projectModal.classList.remove('hide-modal'); // 清理隐藏类
            projectModal.removeEventListener('animationend', handler); // 移除监听器
        }
    }, { once: true }); // 确保监听器只执行一次
    document.body.style.overflow = 'auto';//允许背景滚动
}

// 为关闭按钮绑定点击事件
closeButton.onclick = closeProjectModal;

// 点击模态框背景时关闭模态框
window.onclick = function (event) {
    if (event.target === projectModal) {
        closeProjectModal();
    }
};

/**
 * @function setupScrollAnimations
 * @description 设置滚动时的元素动画效果。
 */
function setupScrollAnimations() {
    // Intersection Observer 的配置选项
    const observerOptions = {
        root: null, // 相对视口进行观察
        rootMargin: '0px',
        threshold: 0.05 // 目标元素 5% 可见时触发回调 (从 0.1 调整为 0.05，提前触发动画)
    };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const element = entry.target;
                const animationType = element.dataset.animation;

                // 根据 data-animation 属性应用不同的动画
                if (animationType === 'fade-up') {
                    anime({
                        targets: element,
                        opacity: [0, 1],
                        translateY: [50, 0],
                        duration: 700, // 略微缩短动画时长，减少卡顿感
                        easing: 'easeOutQuad',
                        delay: anime.stagger(80) // 略微缩短错开动画延迟
                    });
                } else if (animationType === 'scale-in') {
                    anime({
                        targets: element,
                        opacity: [0, 1],
                        scale: [0.9, 1],
                        duration: 600, // 略微缩短动画时长
                        easing: 'easeOutBack',
                        delay: anime.stagger(80) // 略微缩短错开动画延迟
                    });
                }

                // 对于章节标题：添加 'in-view' 类以触发下划线动画
                if (element.classList.contains('section-title-animated')) {
                    element.classList.add('in-view');
                }

                observer.unobserve(element); // 元素动画完成后停止观察
            }
        });
    }, observerOptions);

    // 观察所有带有 data-animation 属性的元素和章节标题
    document.querySelectorAll('[data-animation], .section-title-animated').forEach(element => {
        // 排除已由初始页面加载动画处理的首页元素
        // 章节标题的透明度由 ::after 伪元素控制，其文本部分始终可见
        if (!element.classList.contains('animate-fade-in-up') &&
            !element.classList.contains('animate-slide-in-left') &&
            !element.classList.contains('section-title-animated')) {
            element.style.opacity = 0;
        }
        observer.observe(element); // 开始观察
    });

    // --- 首页元素的特殊初始加载动画 ---
    const homePhoto = document.querySelector('.animate-fade-in-up');
    if (homePhoto) {
        // 个人照片动画
        anime({
            targets: homePhoto,
            opacity: [0, 1],
            translateY: [50, 0],
            duration: 1000,
            easing: 'easeOutExpo'
        });
    }

    const homeTitle = document.querySelector('.animate-slide-in-left');
    if (homeTitle) {
        // 姓名标题动画
        anime({
            targets: homeTitle,
            opacity: [0, 1],
            translateX: [-100, 0],
            duration: 1000,
            easing: 'easeOutExpo',
            delay: 200
        });
    }

    const contactInfo = document.querySelector('.animate-fade-in-up[style*="animation-delay: 450ms"]');
    if (contactInfo) {
        // 联系信息动画
        anime({
            targets: contactInfo,
            opacity: [0, 1],
            translateY: [10, 0],
            duration: 700,
            easing: 'easeOutQuad',
            delay: 450
        });
    }

    const homeStrengthsGrid = document.querySelectorAll('#home-core-strengths-grid > div');
    if (homeStrengthsGrid.length > 0) {
        // 核心优势卡片动画
        anime({
            targets: homeStrengthsGrid,
            opacity: [0, 1],
            scale: [0.9, 1],
            duration: 700,
            easing: 'easeOutBack',
            delay: anime.stagger(100, { start: 900 }) // 错开动画，延迟开始
        });
    }
}

/**
 * @function setupActiveNavLinkHighlight
 * @description 设置根据滚动位置高亮显示导航链接的效果。
 */
function setupActiveNavLinkHighlight() {
    const sections = document.querySelectorAll('main section'); // 获取所有主内容章节
    const navLinks = document.querySelectorAll('.nav-link'); // 获取所有导航链接
    const observerOptions = {
        root: null,
        // 当章节的中心线穿过视口中心时触发回调
        // 调整 rootMargin 以创建更宽的检测区域，使得导航链接更容易被选中
        rootMargin: '-25% 0px -25% 0px', // 将视口顶部和底部各 25% 排除在外
        threshold: 0 // 只要目标元素有任何部分进入视口就触发
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const currentSectionId = entry.target.id; // 获取当前进入视口的章节 ID
                navLinks.forEach(link => {
                    link.classList.remove('nav-link-active'); // 移除所有链接的激活状态
                    // 如果链接的 href 属性与当前章节 ID 匹配，则添加激活状态
                    if (link.getAttribute('href') === `#${currentSectionId}`) {
                        link.classList.add('nav-link-active');
                    }
                });
            }
        });
    }, observerOptions);

    // 观察每个章节
    sections.forEach(section => {
        observer.observe(section);
    });
}

